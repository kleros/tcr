{
  "address": "0x8FeAB350A304140b1593A38a13607d122BEC44b6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_arbitrationPrice",
          "type": "uint256"
        },
        {
          "internalType": "contract IArbitrator",
          "name": "_arbitrator",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_arbitratorExtraData",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_timeOut",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IArbitrable",
          "name": "_arbitrable",
          "type": "address"
        }
      ],
      "name": "AppealDecision",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IArbitrable",
          "name": "_arbitrable",
          "type": "address"
        }
      ],
      "name": "AppealPossible",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IArbitrable",
          "name": "_arbitrable",
          "type": "address"
        }
      ],
      "name": "DisputeCreation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IArbitrator",
          "name": "_arbitrator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_ruling",
          "type": "uint256"
        }
      ],
      "name": "Ruling",
      "type": "event"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_extraData",
          "type": "bytes"
        }
      ],
      "name": "appeal",
      "outputs": [],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_extraData",
          "type": "bytes"
        }
      ],
      "name": "appealCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "cost",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "appealDisputeIDsToDisputeIDs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "appealDisputes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rulingTime",
          "type": "uint256"
        },
        {
          "internalType": "contract IArbitrator",
          "name": "arbitrator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "appealDisputeID",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        }
      ],
      "name": "appealPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_extraData",
          "type": "bytes"
        }
      ],
      "name": "arbitrationCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "arbitrator",
      "outputs": [
        {
          "internalType": "contract IArbitrator",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "arbitratorExtraData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "contract IArbitrator",
          "name": "_arbitrator",
          "type": "address"
        }
      ],
      "name": "changeArbitrator",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timeOut",
          "type": "uint256"
        }
      ],
      "name": "changeTimeOut",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_choices",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_extraData",
          "type": "bytes"
        }
      ],
      "name": "createDispute",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "disputeID",
          "type": "uint256"
        }
      ],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        }
      ],
      "name": "currentRuling",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ruling",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        }
      ],
      "name": "disputeStatus",
      "outputs": [
        {
          "internalType": "enum IArbitrator.DisputeStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "disputes",
      "outputs": [
        {
          "internalType": "contract IArbitrable",
          "name": "arbitrated",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "choices",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ruling",
          "type": "uint256"
        },
        {
          "internalType": "enum IArbitrator.DisputeStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        }
      ],
      "name": "getAppealDisputeID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "disputeID",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ruling",
          "type": "uint256"
        }
      ],
      "name": "giveRuling",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_disputeID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ruling",
          "type": "uint256"
        }
      ],
      "name": "rule",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_arbitrationPrice",
          "type": "uint256"
        }
      ],
      "name": "setArbitrationPrice",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "timeOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x11d6aa4b24a83dc3e2fa385dc551781950d12e26ce3c0173d5beff6ec0820df2",
  "receipt": {
    "to": null,
    "from": "0x0efFC4A996045aff0489774051f94f42F2D6dfc9",
    "contractAddress": "0x8FeAB350A304140b1593A38a13607d122BEC44b6",
    "transactionIndex": 29,
    "gasUsed": "1603953",
    "logsBloom": "0x
    "blockHash": "0xa98c4e7a4c88365a7516f74672187af169cceb2c359ff5f61240052ccf5eccb2",
    "transactionHash": "0x11d6aa4b24a83dc3e2fa385dc551781950d12e26ce3c0173d5beff6ec0820df2",
    "logs": [],
    "blockNumber": 4048250,
    "cumulativeGasUsed": "12165333",
    "status": 1,
    "byzantium": true
  },
  "args": [
    1000,
    "0x0efFC4A996045aff0489774051f94f42F2D6dfc9",
    "0x85",
    180
  ],
  "numDeployments": 1,
  "solcInputHash": "8e68fa05bce2d1098c0738035c7962ed",
  "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_arbitrationPrice\",\"type\":\"uint256\"},{\"internalType\":\"contract IArbitrator\",\"name\":\"_arbitrator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_arbitratorExtraData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_timeOut\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IArbitrable\",\"name\":\"_arbitrable\",\"type\":\"address\"}],\"name\":\"AppealDecision\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IArbitrable\",\"name\":\"_arbitrable\",\"type\":\"address\"}],\"name\":\"AppealPossible\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IArbitrable\",\"name\":\"_arbitrable\",\"type\":\"address\"}],\"name\":\"DisputeCreation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IArbitrator\",\"name\":\"_arbitrator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_ruling\",\"type\":\"uint256\"}],\"name\":\"Ruling\",\"type\":\"event\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"appeal\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"appealCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cost\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"appealDisputeIDsToDisputeIDs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"appealDisputes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rulingTime\",\"type\":\"uint256\"},{\"internalType\":\"contract IArbitrator\",\"name\":\"arbitrator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"appealDisputeID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"}],\"name\":\"appealPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"arbitrationCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arbitrator\",\"outputs\":[{\"internalType\":\"contract IArbitrator\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"arbitratorExtraData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"contract IArbitrator\",\"name\":\"_arbitrator\",\"type\":\"address\"}],\"name\":\"changeArbitrator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timeOut\",\"type\":\"uint256\"}],\"name\":\"changeTimeOut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_choices\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_extraData\",\"type\":\"bytes\"}],\"name\":\"createDispute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeID\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"}],\"name\":\"currentRuling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ruling\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"}],\"name\":\"disputeStatus\",\"outputs\":[{\"internalType\":\"enum IArbitrator.DisputeStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"disputes\",\"outputs\":[{\"internalType\":\"contract IArbitrable\",\"name\":\"arbitrated\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"choices\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ruling\",\"type\":\"uint256\"},{\"internalType\":\"enum IArbitrator.DisputeStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"}],\"name\":\"getAppealDisputeID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"disputeID\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ruling\",\"type\":\"uint256\"}],\"name\":\"giveRuling\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_disputeID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ruling\",\"type\":\"uint256\"}],\"name\":\"rule\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_arbitrationPrice\",\"type\":\"uint256\"}],\"name\":\"setArbitrationPrice\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"timeOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Enrique Piqueras - <epiquerass@gmail.com>\",\"details\":\"Implementation of `AppealableArbitrator` that supports `appealPeriod`.\",\"methods\":{\"appeal(uint256,bytes)\":{\"details\":\"Appeals a ruling.\",\"params\":{\"_disputeID\":\"The ID of the dispute.\",\"_extraData\":\"Additional info about the appeal.\"}},\"appealCost(uint256,bytes)\":{\"details\":\"Gets the cost of appeal for the specified dispute.\",\"params\":{\"_disputeID\":\"The ID of the dispute.\",\"_extraData\":\"Additional info about the appeal.\"},\"return\":\"The cost of the appeal.\"},\"appealPeriod(uint256)\":{\"details\":\"Compute the start and end of the dispute's current or next appeal period, if possible.\",\"params\":{\"_disputeID\":\"ID of the dispute.\"},\"return\":\"The start and end of the period.\"},\"arbitrationCost(bytes)\":{\"details\":\"Cost of arbitration. Accessor to arbitrationPrice.\",\"params\":{\"_extraData\":\"Not used by this contract.\"},\"return\":\"fee Amount to be paid.\"},\"changeArbitrator(address)\":{\"details\":\"Changes the back up arbitrator.\",\"params\":{\"_arbitrator\":\"The new back up arbitrator.\"}},\"changeTimeOut(uint256)\":{\"details\":\"Changes the time out.\",\"params\":{\"_timeOut\":\"The new time out.\"}},\"constructor\":{\"details\":\"Constructs the `EnhancedAppealableArbitrator` contract.\",\"params\":{\"_arbitrationPrice\":\"The amount to be paid for arbitration.\",\"_arbitrator\":\"The back up arbitrator.\",\"_arbitratorExtraData\":\"Not used by this contract.\",\"_timeOut\":\"The time out for the appeal period.\"}},\"createDispute(uint256,bytes)\":{\"details\":\"Create a dispute. Must be called by the arbitrable contract. Must be paid at least arbitrationCost().\",\"params\":{\"_choices\":\"Amount of choices the arbitrator can make in this dispute. When ruling ruling<=choices.\",\"_extraData\":\"Can be used to give additional info on the dispute to be created.\"},\"return\":\"disputeID ID of the dispute created.\"},\"currentRuling(uint256)\":{\"details\":\"Return the ruling of a dispute.\",\"params\":{\"_disputeID\":\"ID of the dispute to rule.\"},\"return\":\"ruling The ruling which would or has been given.\"},\"disputeStatus(uint256)\":{\"details\":\"Gets the status of the specified dispute.\",\"params\":{\"_disputeID\":\"The ID of the dispute.\"},\"return\":\"The status.\"},\"getAppealDisputeID(uint256)\":{\"details\":\"Gets the specified dispute's latest appeal ID.\",\"params\":{\"_disputeID\":\"The ID of the dispute.\"}},\"giveRuling(uint256,uint256)\":{\"details\":\"Gives a ruling.\",\"params\":{\"_disputeID\":\"The ID of the dispute.\",\"_ruling\":\"The ruling.\"}},\"rule(uint256,uint256)\":{\"details\":\"Give a ruling for a dispute. Must be called by the arbitrator. The purpose of this function is to ensure that the address calling it has the right to rule on the contract.\",\"params\":{\"_disputeID\":\"ID of the dispute in the IArbitrator contract.\",\"_ruling\":\"Ruling given by the arbitrator. Note that 0 is reserved for \\\"Not able/wanting to make a decision\\\".\"}},\"setArbitrationPrice(uint256)\":{\"details\":\"Set the arbitration price. Only callable by the owner.\",\"params\":{\"_arbitrationPrice\":\"Amount to be paid for arbitration.\"}}},\"title\":\"EnhancedAppealableArbitrator\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/test-purposes/EnhancedAppealableArbitrator.sol\":\"EnhancedAppealableArbitrator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@kleros/erc-792/contracts/IArbitrable.sol\":{\"content\":\"/**\\n *  @title IArbitrable\\n *  @author Enrique Piqueras - <enrique@kleros.io>\\n */\\n\\npragma solidity ^0.5;\\n\\nimport \\\"./IArbitrator.sol\\\";\\n\\n/** @title IArbitrable\\n *  Arbitrable interface.\\n *  When developing arbitrable contracts, we need to:\\n *  -Define the action taken when a ruling is received by the contract.\\n *  -Allow dispute creation. For this a function must call arbitrator.createDispute.value(_fee)(_choices,_extraData);\\n */\\ninterface IArbitrable {\\n\\n    /** @dev To be raised when a ruling is given.\\n     *  @param _arbitrator The arbitrator giving the ruling.\\n     *  @param _disputeID ID of the dispute in the Arbitrator contract.\\n     *  @param _ruling The ruling which was given.\\n     */\\n    event Ruling(IArbitrator indexed _arbitrator, uint indexed _disputeID, uint _ruling);\\n\\n    /** @dev Give a ruling for a dispute. Must be called by the arbitrator.\\n     *  The purpose of this function is to ensure that the address calling it has the right to rule on the contract.\\n     *  @param _disputeID ID of the dispute in the Arbitrator contract.\\n     *  @param _ruling Ruling given by the arbitrator. Note that 0 is reserved for \\\"Not able/wanting to make a decision\\\".\\n     */\\n    function rule(uint _disputeID, uint _ruling) external;\\n}\\n\",\"keccak256\":\"0x68e90a06a982dfa968f3aa76ac519126b090707a07e6e984a69ccbc06b6c7cc0\"},\"@kleros/erc-792/contracts/IArbitrator.sol\":{\"content\":\"/**\\n *  @title Arbitrator\\n *  @author Cl\\u00e9ment Lesaege - <clement@lesaege.com>\\n */\\n\\npragma solidity ^0.5;\\n\\nimport \\\"./IArbitrable.sol\\\";\\n\\n/** @title Arbitrator\\n *  Arbitrator abstract contract.\\n *  When developing arbitrator contracts we need to:\\n *  -Define the functions for dispute creation (createDispute) and appeal (appeal). Don't forget to store the arbitrated contract and the disputeID (which should be unique, may nbDisputes).\\n *  -Define the functions for cost display (arbitrationCost and appealCost).\\n *  -Allow giving rulings. For this a function must call arbitrable.rule(disputeID, ruling).\\n */\\ninterface IArbitrator {\\n\\n    enum DisputeStatus {Waiting, Appealable, Solved}\\n\\n\\n    /** @dev To be emitted when a dispute is created.\\n     *  @param _disputeID ID of the dispute.\\n     *  @param _arbitrable The contract which created the dispute.\\n     */\\n    event DisputeCreation(uint indexed _disputeID, IArbitrable indexed _arbitrable);\\n\\n    /** @dev To be emitted when a dispute can be appealed.\\n     *  @param _disputeID ID of the dispute.\\n     */\\n    event AppealPossible(uint indexed _disputeID, IArbitrable indexed _arbitrable);\\n\\n    /** @dev To be emitted when the current ruling is appealed.\\n     *  @param _disputeID ID of the dispute.\\n     *  @param _arbitrable The contract which created the dispute.\\n     */\\n    event AppealDecision(uint indexed _disputeID, IArbitrable indexed _arbitrable);\\n\\n    /** @dev Create a dispute. Must be called by the arbitrable contract.\\n     *  Must be paid at least arbitrationCost(_extraData).\\n     *  @param _choices Amount of choices the arbitrator can make in this dispute.\\n     *  @param _extraData Can be used to give additional info on the dispute to be created.\\n     *  @return disputeID ID of the dispute created.\\n     */\\n    function createDispute(uint _choices, bytes calldata _extraData) external payable returns(uint disputeID);\\n\\n    /** @dev Compute the cost of arbitration. It is recommended not to increase it often, as it can be highly time and gas consuming for the arbitrated contracts to cope with fee augmentation.\\n     *  @param _extraData Can be used to give additional info on the dispute to be created.\\n     *  @return cost Amount to be paid.\\n     */\\n    function arbitrationCost(bytes calldata _extraData) external view returns(uint cost);\\n\\n    /** @dev Appeal a ruling. Note that it has to be called before the arbitrator contract calls rule.\\n     *  @param _disputeID ID of the dispute to be appealed.\\n     *  @param _extraData Can be used to give extra info on the appeal.\\n     */\\n    function appeal(uint _disputeID, bytes calldata _extraData) external payable;\\n\\n    /** @dev Compute the cost of appeal. It is recommended not to increase it often, as it can be higly time and gas consuming for the arbitrated contracts to cope with fee augmentation.\\n     *  @param _disputeID ID of the dispute to be appealed.\\n     *  @param _extraData Can be used to give additional info on the dispute to be created.\\n     *  @return cost Amount to be paid.\\n     */\\n    function appealCost(uint _disputeID, bytes calldata _extraData) external view returns(uint cost);\\n\\n    /** @dev Compute the start and end of the dispute's current or next appeal period, if possible. If not known or appeal is impossible: should return (0, 0).\\n     *  @param _disputeID ID of the dispute.\\n     *  @return The start and end of the period.\\n     */\\n    function appealPeriod(uint _disputeID) external view returns(uint start, uint end);\\n\\n    /** @dev Return the status of a dispute.\\n     *  @param _disputeID ID of the dispute to rule.\\n     *  @return status The status of the dispute.\\n     */\\n    function disputeStatus(uint _disputeID) external view returns(DisputeStatus status);\\n\\n    /** @dev Return the current ruling of a dispute. This is useful for parties to know if they should appeal.\\n     *  @param _disputeID ID of the dispute.\\n     *  @return ruling The ruling which has been given or the one which will be given if there is no appeal.\\n     */\\n    function currentRuling(uint _disputeID) external view returns(uint ruling);\\n\\n}\\n\",\"keccak256\":\"0x98e3799e61a5e1cc8c01426a56927ec23a8ff8f807751d5c5cc111da683b3f50\"},\"contracts/test-purposes/AppealableArbitrator.sol\":{\"content\":\"/**\\n*  https://contributing.kleros.io/smart-contract-workflow\\n*  @authors: [@epiqueras, @ferittuncer, @unknownunknown1, @mtsalenc]\\n*  @reviewers: []\\n*  @auditors: []\\n*  @bounties: []\\n*  @deployments: []\\n*/\\n\\npragma solidity ^0.5.11;\\n\\nimport \\\"./CentralizedArbitrator.sol\\\";\\n\\n/**\\n *  @title AppealableArbitrator\\n *  @dev A centralized arbitrator that can be appealed.\\n */\\ncontract AppealableArbitrator is CentralizedArbitrator, IArbitrable {\\n    /* Structs */\\n\\n    struct AppealDispute {\\n        uint rulingTime;\\n        IArbitrator arbitrator;\\n        uint appealDisputeID;\\n    }\\n\\n    /* Modifiers */\\n\\n    modifier onlyArbitrator {require(msg.sender == address(arbitrator), \\\"Can only be called by the arbitrator.\\\"); _;}\\n    modifier requireAppealFee(uint _disputeID, bytes memory _extraData) {\\n        require(msg.value >= appealCost(_disputeID, _extraData), \\\"Not enough ETH to cover appeal costs.\\\");\\n        _;\\n    }\\n\\n    /* Storage */\\n\\n    uint public timeOut;\\n    mapping(uint => AppealDispute) public appealDisputes;\\n    mapping(uint => uint) public appealDisputeIDsToDisputeIDs;\\n    IArbitrator public arbitrator;\\n    bytes public arbitratorExtraData; // Extra data to require particular dispute and appeal behaviour.\\n\\n    /* Constructor */\\n\\n    /** @dev Constructs the `AppealableArbitrator` contract.\\n     *  @param _arbitrationPrice The amount to be paid for arbitration.\\n     *  @param _arbitrator The back up arbitrator.\\n     *  @param _arbitratorExtraData Not used by this contract.\\n     *  @param _timeOut The time out for the appeal period.\\n     */\\n    constructor(\\n        uint _arbitrationPrice,\\n        IArbitrator _arbitrator,\\n        bytes memory _arbitratorExtraData,\\n        uint _timeOut\\n    ) public CentralizedArbitrator(_arbitrationPrice) {\\n        timeOut = _timeOut;\\n    }\\n\\n    /* External */\\n\\n    /** @dev Changes the back up arbitrator.\\n     *  @param _arbitrator The new back up arbitrator.\\n     */\\n    function changeArbitrator(IArbitrator _arbitrator) external onlyOwner {\\n        arbitrator = _arbitrator;\\n    }\\n\\n    /** @dev Changes the time out.\\n     *  @param _timeOut The new time out.\\n     */\\n    function changeTimeOut(uint _timeOut) external onlyOwner {\\n        timeOut = _timeOut;\\n    }\\n\\n    /* External Views */\\n\\n    /** @dev Gets the specified dispute's latest appeal ID.\\n     *  @param _disputeID The ID of the dispute.\\n     */\\n    function getAppealDisputeID(uint _disputeID) external view returns(uint disputeID) {\\n        if (appealDisputes[_disputeID].arbitrator != IArbitrator(address(0)))\\n            disputeID = AppealableArbitrator(address(appealDisputes[_disputeID].arbitrator)).getAppealDisputeID(appealDisputes[_disputeID].appealDisputeID);\\n        else disputeID = _disputeID;\\n    }\\n\\n    /* Public */\\n\\n    /** @dev Appeals a ruling.\\n     *  @param _disputeID The ID of the dispute.\\n     *  @param _extraData Additional info about the appeal.\\n     */\\n    function appeal(uint _disputeID, bytes memory _extraData) public payable requireAppealFee(_disputeID, _extraData) {\\n        if (appealDisputes[_disputeID].arbitrator != IArbitrator(address(0)))\\n            appealDisputes[_disputeID].arbitrator.appeal.value(msg.value)(appealDisputes[_disputeID].appealDisputeID, _extraData);\\n        else {\\n            appealDisputes[_disputeID].arbitrator = arbitrator;\\n            appealDisputes[_disputeID].appealDisputeID = arbitrator.createDispute.value(msg.value)(disputes[_disputeID].choices, _extraData);\\n            appealDisputeIDsToDisputeIDs[appealDisputes[_disputeID].appealDisputeID] = _disputeID;\\n        }\\n    }\\n\\n    /** @dev Gives a ruling.\\n     *  @param _disputeID The ID of the dispute.\\n     *  @param _ruling The ruling.\\n     */\\n    function giveRuling(uint _disputeID, uint _ruling) public {\\n        require(disputes[_disputeID].status != DisputeStatus.Solved, \\\"The specified dispute is already resolved.\\\");\\n        if (appealDisputes[_disputeID].arbitrator != IArbitrator(address(0))) {\\n            require(IArbitrator(msg.sender) == appealDisputes[_disputeID].arbitrator, \\\"Appealed disputes must be ruled by their back up arbitrator.\\\");\\n            super._giveRuling(_disputeID, _ruling);\\n        } else {\\n            require(msg.sender == owner, \\\"Not appealed disputes must be ruled by the owner.\\\");\\n            if (disputes[_disputeID].status == DisputeStatus.Appealable) {\\n                if (now - appealDisputes[_disputeID].rulingTime > timeOut)\\n                    super._giveRuling(_disputeID, disputes[_disputeID].ruling);\\n                else revert(\\\"Time out time has not passed yet.\\\");\\n            } else {\\n                disputes[_disputeID].ruling = _ruling;\\n                disputes[_disputeID].status = DisputeStatus.Appealable;\\n                appealDisputes[_disputeID].rulingTime = now;\\n                emit AppealPossible(_disputeID, disputes[_disputeID].arbitrated);\\n            }\\n        }\\n    }\\n\\n    /** @dev Give a ruling for a dispute. Must be called by the arbitrator.\\n     *  The purpose of this function is to ensure that the address calling it has the right to rule on the contract.\\n     *  @param _disputeID ID of the dispute in the IArbitrator contract.\\n     *  @param _ruling Ruling given by the arbitrator. Note that 0 is reserved for \\\"Not able/wanting to make a decision\\\".\\n     */\\n    function rule(uint _disputeID, uint _ruling) public onlyArbitrator {\\n        emit Ruling(IArbitrator(msg.sender),_disputeID,_ruling);\\n\\n        executeRuling(_disputeID,_ruling);\\n    }\\n\\n    /* Public Views */\\n\\n    /** @dev Gets the cost of appeal for the specified dispute.\\n     *  @param _disputeID The ID of the dispute.\\n     *  @param _extraData Additional info about the appeal.\\n     *  @return The cost of the appeal.\\n     */\\n    function appealCost(uint _disputeID, bytes memory _extraData) public view returns(uint cost) {\\n        if (appealDisputes[_disputeID].arbitrator != IArbitrator(address(0)))\\n            cost = appealDisputes[_disputeID].arbitrator.appealCost(appealDisputes[_disputeID].appealDisputeID, _extraData);\\n        else if (disputes[_disputeID].status == DisputeStatus.Appealable) cost = arbitrator.arbitrationCost(_extraData);\\n        else cost = NOT_PAYABLE_VALUE;\\n    }\\n\\n    /** @dev Gets the status of the specified dispute.\\n     *  @param _disputeID The ID of the dispute.\\n     *  @return The status.\\n     */\\n    function disputeStatus(uint _disputeID) public view returns(DisputeStatus status) {\\n        if (appealDisputes[_disputeID].arbitrator != IArbitrator(address(0)))\\n            status = appealDisputes[_disputeID].arbitrator.disputeStatus(appealDisputes[_disputeID].appealDisputeID);\\n        else status = disputes[_disputeID].status;\\n    }\\n\\n    /** @dev Return the ruling of a dispute.\\n     *  @param _disputeID ID of the dispute to rule.\\n     *  @return ruling The ruling which would or has been given.\\n     */\\n    function currentRuling(uint _disputeID) public view returns(uint ruling) {\\n        if (appealDisputes[_disputeID].arbitrator != IArbitrator(address(0))) // Appealed.\\n            ruling = appealDisputes[_disputeID].arbitrator.currentRuling(appealDisputes[_disputeID].appealDisputeID); // Retrieve ruling from the arbitrator whom the dispute is appealed to.\\n        else ruling = disputes[_disputeID].ruling; //  Not appealed, basic case.\\n    }\\n\\n    /* Internal */\\n\\n    /** @dev Executes the ruling of the specified dispute.\\n     *  @param _disputeID The ID of the dispute.\\n     *  @param _ruling The ruling.\\n     */\\n    function executeRuling(uint _disputeID, uint _ruling) internal {\\n        require(\\n            appealDisputes[appealDisputeIDsToDisputeIDs[_disputeID]].arbitrator != IArbitrator(address(0)),\\n            \\\"The dispute must have been appealed.\\\"\\n        );\\n        giveRuling(appealDisputeIDsToDisputeIDs[_disputeID], _ruling);\\n    }\\n}\",\"keccak256\":\"0x9c988275034b701b2cb32ccc0cfeb82aaff0cedda1fcbff6ffc3e68deb44f44f\"},\"contracts/test-purposes/CentralizedArbitrator.sol\":{\"content\":\"/**\\n *  @authors: [@clesaege, @n1c01a5, @epiqueras, @ferittuncer, @unknownunknown1, @mtsalenc]\\n *  @reviewers: [@clesaege*, @unknownunknown1*]\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\npragma solidity ^0.5.11;\\n\\nimport { IArbitrator, IArbitrable } from \\\"@kleros/erc-792/contracts/IArbitrator.sol\\\";\\n\\n/** @title Centralized Arbitrator\\n *  @dev This is a centralized arbitrator deciding alone on the result of disputes. No appeals are possible.\\n */\\ncontract CentralizedArbitrator is IArbitrator {\\n\\n    address public owner = msg.sender;\\n    uint arbitrationPrice; // Not public because arbitrationCost already acts as an accessor.\\n    uint constant NOT_PAYABLE_VALUE = (2**256-2)/2; // High value to be sure that the appeal is too expensive.\\n\\n    struct DisputeStruct {\\n        IArbitrable arbitrated;\\n        uint choices;\\n        uint fee;\\n        uint ruling;\\n        DisputeStatus status;\\n    }\\n\\n    modifier onlyOwner {require(msg.sender==owner, \\\"Can only be called by the owner.\\\"); _;}\\n    modifier requireArbitrationFee(bytes memory _extraData) {\\n        require(msg.value >= arbitrationCost(_extraData), \\\"Not enough ETH to cover arbitration costs.\\\");\\n        _;\\n    }\\n\\n    DisputeStruct[] public disputes;\\n\\n    /** @dev Constructor. Set the initial arbitration price.\\n     *  @param _arbitrationPrice Amount to be paid for arbitration.\\n     */\\n    constructor(uint _arbitrationPrice) public {\\n        arbitrationPrice = _arbitrationPrice;\\n    }\\n\\n    /** @dev Set the arbitration price. Only callable by the owner.\\n     *  @param _arbitrationPrice Amount to be paid for arbitration.\\n     */\\n    function setArbitrationPrice(uint _arbitrationPrice) public onlyOwner {\\n        arbitrationPrice = _arbitrationPrice;\\n    }\\n\\n    /** @dev Cost of arbitration. Accessor to arbitrationPrice.\\n     *  @param _extraData Not used by this contract.\\n     *  @return fee Amount to be paid.\\n     */\\n    function arbitrationCost(bytes memory _extraData) public view returns(uint fee) {\\n        return arbitrationPrice;\\n    }\\n\\n    /** @dev Cost of appeal. Since it is not possible, it's a high value which can never be paid.\\n     *  @param _disputeID ID of the dispute to be appealed. Not used by this contract.\\n     *  @param _extraData Not used by this contract.\\n     *  @return fee Amount to be paid.\\n     */\\n    function appealCost(uint _disputeID, bytes memory _extraData) public view returns(uint fee) {\\n        return NOT_PAYABLE_VALUE;\\n    }\\n\\n    /** @dev Create a dispute. Must be called by the arbitrable contract.\\n     *  Must be paid at least arbitrationCost().\\n     *  @param _choices Amount of choices the arbitrator can make in this dispute. When ruling ruling<=choices.\\n     *  @param _extraData Can be used to give additional info on the dispute to be created.\\n     *  @return disputeID ID of the dispute created.\\n     */\\n    function createDispute(uint _choices, bytes memory _extraData) public payable requireArbitrationFee(_extraData) returns(uint disputeID)  {\\n        disputeID = disputes.push(DisputeStruct({\\n            arbitrated: IArbitrable(msg.sender),\\n            choices: _choices,\\n            fee: msg.value,\\n            ruling: 0,\\n            status: DisputeStatus.Waiting\\n            })) - 1; // Create the dispute and return its number.\\n        emit DisputeCreation(disputeID, IArbitrable(msg.sender));\\n    }\\n\\n    /** @dev Give a ruling. UNTRUSTED.\\n     *  @param _disputeID ID of the dispute to rule.\\n     *  @param _ruling Ruling given by the arbitrator. Note that 0 means \\\"Not able/wanting to make a decision\\\".\\n     */\\n    function _giveRuling(uint _disputeID, uint _ruling) internal {\\n        DisputeStruct storage dispute = disputes[_disputeID];\\n        require(_ruling <= dispute.choices, \\\"Invalid ruling.\\\");\\n        require(dispute.status != DisputeStatus.Solved, \\\"The dispute must not be solved already.\\\");\\n\\n        dispute.ruling = _ruling;\\n        dispute.status = DisputeStatus.Solved;\\n\\n        msg.sender.send(dispute.fee); // Avoid blocking.\\n        dispute.arbitrated.rule(_disputeID,_ruling);\\n    }\\n\\n    /** @dev Give a ruling. UNTRUSTED.\\n     *  @param _disputeID ID of the dispute to rule.\\n     *  @param _ruling Ruling given by the arbitrator. Note that 0 means \\\"Not able/wanting to make a decision\\\".\\n     */\\n    function giveRuling(uint _disputeID, uint _ruling) public onlyOwner {\\n        return _giveRuling(_disputeID, _ruling);\\n    }\\n\\n    /** @dev Return the status of a dispute.\\n     *  @param _disputeID ID of the dispute to rule.\\n     *  @return status The status of the dispute.\\n     */\\n    function disputeStatus(uint _disputeID) public view returns(DisputeStatus status) {\\n        return disputes[_disputeID].status;\\n    }\\n\\n    /** @dev Return the ruling of a dispute.\\n     *  @param _disputeID ID of the dispute to rule.\\n     *  @return ruling The ruling which would or has been given.\\n     */\\n    function currentRuling(uint _disputeID) public view returns(uint ruling) {\\n        return disputes[_disputeID].ruling;\\n    }\\n}\",\"keccak256\":\"0xa6650ba99e48a8fa7408d60d42e0139a0c5c0713e199a8bc43b0002209496cf4\"},\"contracts/test-purposes/EnhancedAppealableArbitrator.sol\":{\"content\":\"/**\\n *  @authors: [@epiqueras, @unknownunknown1, @mtsalenc]\\n *  @reviewers: []\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\npragma solidity ^0.5.11;\\n\\nimport \\\"./AppealableArbitrator.sol\\\";\\n\\n/**\\n *  @title EnhancedAppealableArbitrator\\n *  @author Enrique Piqueras - <epiquerass@gmail.com>\\n *  @dev Implementation of `AppealableArbitrator` that supports `appealPeriod`.\\n */\\ncontract EnhancedAppealableArbitrator is AppealableArbitrator {\\n    /* Constructor */\\n\\n    /* solium-disable no-empty-blocks */\\n    /** @dev Constructs the `EnhancedAppealableArbitrator` contract.\\n     *  @param _arbitrationPrice The amount to be paid for arbitration.\\n     *  @param _arbitrator The back up arbitrator.\\n     *  @param _arbitratorExtraData Not used by this contract.\\n     *  @param _timeOut The time out for the appeal period.\\n     */\\n    constructor(\\n        uint256 _arbitrationPrice,\\n        IArbitrator _arbitrator,\\n        bytes memory _arbitratorExtraData,\\n        uint256 _timeOut\\n    ) public AppealableArbitrator(_arbitrationPrice, _arbitrator, _arbitratorExtraData, _timeOut) {}\\n\\n    /* solium-enable no-empty-blocks */\\n\\n    /* Public Views */\\n\\n    /** @dev Compute the start and end of the dispute's current or next appeal period, if possible.\\n     *  @param _disputeID ID of the dispute.\\n     *  @return The start and end of the period.\\n     */\\n    function appealPeriod(uint256 _disputeID) public view returns (uint256 start, uint256 end) {\\n        if (appealDisputes[_disputeID].arbitrator != IArbitrator(address(0)))\\n            (start, end) = appealDisputes[_disputeID].arbitrator.appealPeriod(\\n                appealDisputes[_disputeID].appealDisputeID\\n            );\\n        else {\\n            start = appealDisputes[_disputeID].rulingTime;\\n            require(start != 0, \\\"The specified dispute is not appealable.\\\");\\n            end = start + timeOut;\\n        }\\n    }\\n\\n    /** @dev Appeals a ruling.\\n     *  @param _disputeID The ID of the dispute.\\n     *  @param _extraData Additional info about the appeal.\\n     */\\n    function appeal(uint256 _disputeID, bytes memory _extraData)\\n        public\\n        payable\\n        requireAppealFee(_disputeID, _extraData)\\n    {\\n        emit AppealDecision(_disputeID, IArbitrable(msg.sender));\\n        return super.appeal(_disputeID, _extraData);\\n    }\\n}\\n\",\"keccak256\":\"0xa07a067d01ae3852d01059bf0a6bfbb885cb522972cf867a1fe3ba6090e18f76\"}},\"version\":1}",
  "bytecode": "0x6080604052600080546001600160a01b0319163317905534801561002257600080fd5b50604051611bdd380380611bdd8339818101604052608081101561004557600080fd5b8151602083015160408085018051915193959294830192918464010000000082111561007057600080fd5b90830190602082018581111561008557600080fd5b825164010000000081118282018810171561009f57600080fd5b82525081516020918201929091019080838360005b838110156100cc5781810151838201526020016100b4565b50505050905090810190601f1680156100f95780820380516001836020036101000a031916815260200191505b506040526020015160019590955550505060039190915550611abd806101206000396000f3fe60806040526004361061011e5760003560e01c80636cc6cde1116100a0578063c97c4d5c11610064578063c97c4d5c146105a7578063f23f16e6146105d7578063f7434ea91461068f578063fc548f0814610740578063ffb43c48146107735761011e565b80636cc6cde1146104495780638da5cb5b1461047a57806394e9cb961461048f578063afe15cfb146104b9578063c13517e1146104fc5761011e565b8063311a6c56116100e7578063311a6c561461028b57806337025d21146102bd57806349912f881461030d578063564a565d146103b8578063614d85e1146104345761011e565b8062b58205146101235780630c7ac7b61461015f57806310f169e8146101e957806319810619146102375780631c3db16d14610261575b600080fd5b34801561012f57600080fd5b5061014d6004803603602081101561014657600080fd5b503561079d565b60408051918252519081900360200190f35b34801561016b57600080fd5b506101746107af565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101ae578181015183820152602001610196565b50505050905090810190601f1680156101db5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101f557600080fd5b506102136004803603602081101561020c57600080fd5b503561083d565b6040518082600281111561022357fe5b60ff16815260200191505060405180910390f35b34801561024357600080fd5b5061014d6004803603602081101561025a57600080fd5b5035610919565b34801561026d57600080fd5b5061014d6004803603602081101561028457600080fd5b503561099a565b34801561029757600080fd5b506102bb600480360360408110156102ae57600080fd5b5080359060200135610a3d565b005b3480156102c957600080fd5b506102e7600480360360208110156102e057600080fd5b5035610acb565b604080519384526001600160a01b03909216602084015282820152519081900360600190f35b6102bb6004803603604081101561032357600080fd5b81359190810190604081016020820135600160201b81111561034457600080fd5b82018360208201111561035657600080fd5b803590602001918460018302840111600160201b8311171561037757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610af5945050505050565b3480156103c457600080fd5b506103e2600480360360208110156103db57600080fd5b5035610b7c565b60405180866001600160a01b03166001600160a01b0316815260200185815260200184815260200183815260200182600281111561041c57fe5b60ff1681526020019550505050505060405180910390f35b34801561044057600080fd5b5061014d610bc7565b34801561045557600080fd5b5061045e610bcd565b604080516001600160a01b039092168252519081900360200190f35b34801561048657600080fd5b5061045e610bdc565b34801561049b57600080fd5b506102bb600480360360208110156104b257600080fd5b5035610beb565b3480156104c557600080fd5b506104e3600480360360208110156104dc57600080fd5b5035610c4f565b6040805192835260208301919091528051918290030190f35b61014d6004803603604081101561051257600080fd5b81359190810190604081016020820135600160201b81111561053357600080fd5b82018360208201111561054557600080fd5b803590602001918460018302840111600160201b8311171561056657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610d63945050505050565b3480156105b357600080fd5b506102bb600480360360408110156105ca57600080fd5b5080359060200135610eb0565b3480156105e357600080fd5b5061014d600480360360408110156105fa57600080fd5b81359190810190604081016020820135600160201b81111561061b57600080fd5b82018360208201111561062d57600080fd5b803590602001918460018302840111600160201b8311171561064e57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611168945050505050565b34801561069b57600080fd5b5061014d600480360360208110156106b257600080fd5b810190602081018135600160201b8111156106cc57600080fd5b8201836020820111156106de57600080fd5b803590602001918460018302840111600160201b831117156106ff57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611376945050505050565b34801561074c57600080fd5b506102bb6004803603602081101561076357600080fd5b50356001600160a01b031661137d565b34801561077f57600080fd5b506102bb6004803603602081101561079657600080fd5b50356113fe565b60056020526000908152604090205481565b6007805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156108355780601f1061080a57610100808354040283529160200191610835565b820191906000526020600020905b81548152906001019060200180831161081857829003601f168201915b505050505081565b6000818152600460205260408120600101546001600160a01b0316156108ed576000828152600460208181526040928390206001810154600290910154845163021e2d3d60e31b81529384015292516001600160a01b03909316926310f169e8926024808201939291829003018186803b1580156108ba57600080fd5b505afa1580156108ce573d6000803e3d6000fd5b505050506040513d60208110156108e457600080fd5b50519050610914565b600282815481106108fa57fe5b600091825260209091206004600590920201015460ff1690505b919050565b6000818152600460205260408120600101546001600160a01b0316156109965760008281526004602081815260409283902060018101546002909101548451631981061960e01b81529384015292516001600160a01b03909316926319810619926024808201939291829003018186803b1580156108ba57600080fd5b5090565b6000818152600460205260408120600101546001600160a01b031615610a175760008281526004602081815260409283902060018101546002909101548451631c3db16d60e01b81529384015292516001600160a01b0390931692631c3db16d926024808201939291829003018186803b1580156108ba57600080fd5b60028281548110610a2457fe5b9060005260206000209060050201600301549050919050565b6006546001600160a01b03163314610a865760405162461bcd60e51b81526004018080602001828103825260258152602001806119f56025913960400191505060405180910390fd5b604080518281529051839133917f394027a5fa6e098a1191094d1719d6929b9abc535fcc0c8f448d6a4e756222769181900360200190a3610ac78282611462565b5050565b60046020526000908152604090208054600182015460029092015490916001600160a01b03169083565b8181610b018282611168565b341015610b3f5760405162461bcd60e51b81526004018080602001828103825260258152602001806119756025913960400191505060405180910390fd5b604051339085907f9c9b64db9e130f48381bf697abf638e73117dbfbfd7a4484f2da3ba188f4187d90600090a3610b7684846114de565b50505050565b60028181548110610b8957fe5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b0390931694509092909160ff1685565b60035481565b6006546001600160a01b031681565b6000546001600160a01b031681565b6000546001600160a01b03163314610c4a576040805162461bcd60e51b815260206004820181905260248201527f43616e206f6e6c792062652063616c6c656420627920746865206f776e65722e604482015290519081900360640190fd5b600355565b60008181526004602052604081206001015481906001600160a01b031615610d0a576000838152600460208190526040918290206001810154600290910154835163afe15cfb60e01b81529283015282516001600160a01b039091169263afe15cfb9260248082019391829003018186803b158015610ccd57600080fd5b505afa158015610ce1573d6000803e3d6000fd5b505050506040513d6040811015610cf757600080fd5b5080516020909101519092509050610d5e565b600083815260046020526040902054915081610d575760405162461bcd60e51b81526004018080602001828103825260288152602001806119266028913960400191505060405180910390fd5b5060035481015b915091565b600081610d6f81611376565b341015610dad5760405162461bcd60e51b815260040180806020018281038252602a815260200180611a1a602a913960400191505060405180910390fd5b600160026040518060a00160405280336001600160a01b031681526020018781526020013481526020016000815260200160006002811115610deb57fe5b9052815460018082018085556000948552602094859020845160059094020180546001600160a01b0319166001600160a01b03909416939093178355938301518282015560408301516002808401919091556060840151600384015560808401516004840180549193909260ff19909216918490811115610e6857fe5b02179055505050039150336001600160a01b0316827f141dfc18aa6a56fc816f44f0e9e2f1ebc92b15ab167770e17db5b084c10ed99560405160405180910390a35092915050565b6002808381548110610ebe57fe5b600091825260209091206004600590920201015460ff166002811115610ee057fe5b1415610f1d5760405162461bcd60e51b815260040180806020018281038252602a81526020018061199a602a913960400191505060405180910390fd5b6000828152600460205260409020600101546001600160a01b031615610fa4576000828152600460205260409020600101546001600160a01b03163314610f955760405162461bcd60e51b815260040180806020018281038252603c8152602001806118ea603c913960400191505060405180910390fd5b610f9f8282611789565b610ac7565b6000546001600160a01b03163314610fed5760405162461bcd60e51b81526004018080602001828103825260318152602001806119c46031913960400191505060405180910390fd5b600160028381548110610ffc57fe5b600091825260209091206004600590920201015460ff16600281111561101e57fe5b14156110a2576003546000838152600460205260409020544203111561106b57611066826002848154811061104f57fe5b906000526020600020906005020160030154611789565b610f9f565b60405162461bcd60e51b8152600401808060200182810382526021815260200180611a446021913960400191505060405180910390fd5b80600283815481106110b057fe5b9060005260206000209060050201600301819055506001600283815481106110d457fe5b60009182526020909120600460059092020101805460ff191660018360028111156110fb57fe5b02179055506000828152600460205260409020429055600280548390811061111f57fe5b600091825260208220600590910201546040516001600160a01b039091169184917fa5d41b970d849372be1da1481ffd78d162bfe57a7aa2fe4e5fb73481fa5ac24f9190a35050565b6000828152600460205260408120600101546001600160a01b0316156112855760008381526004602081815260408084206001810154600290910154825163791f8b7360e11b8152948501818152602486019384528851604487015288516001600160a01b039093169663f23f16e69692958a959294929360640192908601918190849084905b838110156112075781810151838201526020016111ef565b50505050905090810190601f1680156112345780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561125257600080fd5b505afa158015611266573d6000803e3d6000fd5b505050506040513d602081101561127c57600080fd5b50519050611370565b60016002848154811061129457fe5b600091825260209091206004600590920201015460ff1660028111156112b657fe5b14156113665760065460405163f7434ea960e01b81526020600482018181528551602484015285516001600160a01b039094169363f7434ea993879383926044909201919085019080838360005b8381101561131c578181015183820152602001611304565b50505050905090810190601f1680156113495780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b15801561125257600080fd5b506001600160ff1b035b92915050565b5060015490565b6000546001600160a01b031633146113dc576040805162461bcd60e51b815260206004820181905260248201527f43616e206f6e6c792062652063616c6c656420627920746865206f776e65722e604482015290519081900360640190fd5b600680546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461145d576040805162461bcd60e51b815260206004820181905260248201527f43616e206f6e6c792062652063616c6c656420627920746865206f776e65722e604482015290519081900360640190fd5b600155565b600082815260056020908152604080832054835260049091529020600101546001600160a01b03166114c55760405162461bcd60e51b8152600401808060200182810382526024815260200180611a656024913960400191505060405180910390fd5b600082815260056020526040902054610ac79082610eb0565b81816114ea8282611168565b3410156115285760405162461bcd60e51b81526004018080602001828103825260258152602001806119756025913960400191505060405180910390fd5b6000848152600460205260409020600101546001600160a01b0316156116365760008481526004602081815260408084206001810154600290910154825163093225f160e31b8152948501818152602486019384528951604487015289516001600160a01b03909316966349912f8896349693958c959394909360649092019290860191908190849084905b838110156115cc5781810151838201526020016115b4565b50505050905090810190601f1680156115f95780820380516001836020036101000a031916815260200191505b5093505050506000604051808303818588803b15801561161857600080fd5b505af115801561162c573d6000803e3d6000fd5b5050505050610b76565b60068054600086815260046020526040902060010180546001600160a01b0319166001600160a01b03928316179055905460028054919092169163c13517e1913491908890811061168357fe5b906000526020600020906005020160010154866040518463ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156116e85781810151838201526020016116d0565b50505050905090810190601f1680156117155780820380516001836020036101000a031916815260200191505b5093505050506020604051808303818588803b15801561173457600080fd5b505af1158015611748573d6000803e3d6000fd5b50505050506040513d602081101561175f57600080fd5b50516000858152600460209081526040808320600201849055928252600590522084905550505050565b60006002838154811061179857fe5b9060005260206000209060050201905080600101548211156117f3576040805162461bcd60e51b815260206004820152600f60248201526e24b73b30b634b210393ab634b7339760891b604482015290519081900360640190fd5b6002600482015460ff16600281111561180857fe5b14156118455760405162461bcd60e51b815260040180806020018281038252602781526020018061194e6027913960400191505060405180910390fd5b6003810182905560048101805460ff1916600290811790915581015460405133916108fc811502916000818181858888f1505083546040805163188d362b60e11b8152600481018990526024810188905290516001600160a01b03909216945063311a6c569350604480820193506000929182900301818387803b1580156118cc57600080fd5b505af11580156118e0573d6000803e3d6000fd5b5050505050505056fe41707065616c6564206469737075746573206d7573742062652072756c6564206279207468656972206261636b2075702061726269747261746f722e546865207370656369666965642064697370757465206973206e6f742061707065616c61626c652e5468652064697370757465206d757374206e6f7420626520736f6c76656420616c72656164792e4e6f7420656e6f7567682045544820746f20636f7665722061707065616c20636f7374732e54686520737065636966696564206469737075746520697320616c7265616479207265736f6c7665642e4e6f742061707065616c6564206469737075746573206d7573742062652072756c656420627920746865206f776e65722e43616e206f6e6c792062652063616c6c6564206279207468652061726269747261746f722e4e6f7420656e6f7567682045544820746f20636f766572206172626974726174696f6e20636f7374732e54696d65206f75742074696d6520686173206e6f7420706173736564207965742e5468652064697370757465206d7573742068617665206265656e2061707065616c65642ea265627a7a723158204b9598f977ac51cd4d02e0c4784aaaace2ae6570fd87f66b8cd26501efa7654764736f6c63430005110032",
  "deployedBytecode": "0x60806040526004361061011e5760003560e01c80636cc6cde1116100a0578063c97c4d5c11610064578063c97c4d5c146105a7578063f23f16e6146105d7578063f7434ea91461068f578063fc548f0814610740578063ffb43c48146107735761011e565b80636cc6cde1146104495780638da5cb5b1461047a57806394e9cb961461048f578063afe15cfb146104b9578063c13517e1146104fc5761011e565b8063311a6c56116100e7578063311a6c561461028b57806337025d21146102bd57806349912f881461030d578063564a565d146103b8578063614d85e1146104345761011e565b8062b58205146101235780630c7ac7b61461015f57806310f169e8146101e957806319810619146102375780631c3db16d14610261575b600080fd5b34801561012f57600080fd5b5061014d6004803603602081101561014657600080fd5b503561079d565b60408051918252519081900360200190f35b34801561016b57600080fd5b506101746107af565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101ae578181015183820152602001610196565b50505050905090810190601f1680156101db5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101f557600080fd5b506102136004803603602081101561020c57600080fd5b503561083d565b6040518082600281111561022357fe5b60ff16815260200191505060405180910390f35b34801561024357600080fd5b5061014d6004803603602081101561025a57600080fd5b5035610919565b34801561026d57600080fd5b5061014d6004803603602081101561028457600080fd5b503561099a565b34801561029757600080fd5b506102bb600480360360408110156102ae57600080fd5b5080359060200135610a3d565b005b3480156102c957600080fd5b506102e7600480360360208110156102e057600080fd5b5035610acb565b604080519384526001600160a01b03909216602084015282820152519081900360600190f35b6102bb6004803603604081101561032357600080fd5b81359190810190604081016020820135600160201b81111561034457600080fd5b82018360208201111561035657600080fd5b803590602001918460018302840111600160201b8311171561037757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610af5945050505050565b3480156103c457600080fd5b506103e2600480360360208110156103db57600080fd5b5035610b7c565b60405180866001600160a01b03166001600160a01b0316815260200185815260200184815260200183815260200182600281111561041c57fe5b60ff1681526020019550505050505060405180910390f35b34801561044057600080fd5b5061014d610bc7565b34801561045557600080fd5b5061045e610bcd565b604080516001600160a01b039092168252519081900360200190f35b34801561048657600080fd5b5061045e610bdc565b34801561049b57600080fd5b506102bb600480360360208110156104b257600080fd5b5035610beb565b3480156104c557600080fd5b506104e3600480360360208110156104dc57600080fd5b5035610c4f565b6040805192835260208301919091528051918290030190f35b61014d6004803603604081101561051257600080fd5b81359190810190604081016020820135600160201b81111561053357600080fd5b82018360208201111561054557600080fd5b803590602001918460018302840111600160201b8311171561056657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610d63945050505050565b3480156105b357600080fd5b506102bb600480360360408110156105ca57600080fd5b5080359060200135610eb0565b3480156105e357600080fd5b5061014d600480360360408110156105fa57600080fd5b81359190810190604081016020820135600160201b81111561061b57600080fd5b82018360208201111561062d57600080fd5b803590602001918460018302840111600160201b8311171561064e57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611168945050505050565b34801561069b57600080fd5b5061014d600480360360208110156106b257600080fd5b810190602081018135600160201b8111156106cc57600080fd5b8201836020820111156106de57600080fd5b803590602001918460018302840111600160201b831117156106ff57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611376945050505050565b34801561074c57600080fd5b506102bb6004803603602081101561076357600080fd5b50356001600160a01b031661137d565b34801561077f57600080fd5b506102bb6004803603602081101561079657600080fd5b50356113fe565b60056020526000908152604090205481565b6007805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156108355780601f1061080a57610100808354040283529160200191610835565b820191906000526020600020905b81548152906001019060200180831161081857829003601f168201915b505050505081565b6000818152600460205260408120600101546001600160a01b0316156108ed576000828152600460208181526040928390206001810154600290910154845163021e2d3d60e31b81529384015292516001600160a01b03909316926310f169e8926024808201939291829003018186803b1580156108ba57600080fd5b505afa1580156108ce573d6000803e3d6000fd5b505050506040513d60208110156108e457600080fd5b50519050610914565b600282815481106108fa57fe5b600091825260209091206004600590920201015460ff1690505b919050565b6000818152600460205260408120600101546001600160a01b0316156109965760008281526004602081815260409283902060018101546002909101548451631981061960e01b81529384015292516001600160a01b03909316926319810619926024808201939291829003018186803b1580156108ba57600080fd5b5090565b6000818152600460205260408120600101546001600160a01b031615610a175760008281526004602081815260409283902060018101546002909101548451631c3db16d60e01b81529384015292516001600160a01b0390931692631c3db16d926024808201939291829003018186803b1580156108ba57600080fd5b60028281548110610a2457fe5b9060005260206000209060050201600301549050919050565b6006546001600160a01b03163314610a865760405162461bcd60e51b81526004018080602001828103825260258152602001806119f56025913960400191505060405180910390fd5b604080518281529051839133917f394027a5fa6e098a1191094d1719d6929b9abc535fcc0c8f448d6a4e756222769181900360200190a3610ac78282611462565b5050565b60046020526000908152604090208054600182015460029092015490916001600160a01b03169083565b8181610b018282611168565b341015610b3f5760405162461bcd60e51b81526004018080602001828103825260258152602001806119756025913960400191505060405180910390fd5b604051339085907f9c9b64db9e130f48381bf697abf638e73117dbfbfd7a4484f2da3ba188f4187d90600090a3610b7684846114de565b50505050565b60028181548110610b8957fe5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b0390931694509092909160ff1685565b60035481565b6006546001600160a01b031681565b6000546001600160a01b031681565b6000546001600160a01b03163314610c4a576040805162461bcd60e51b815260206004820181905260248201527f43616e206f6e6c792062652063616c6c656420627920746865206f776e65722e604482015290519081900360640190fd5b600355565b60008181526004602052604081206001015481906001600160a01b031615610d0a576000838152600460208190526040918290206001810154600290910154835163afe15cfb60e01b81529283015282516001600160a01b039091169263afe15cfb9260248082019391829003018186803b158015610ccd57600080fd5b505afa158015610ce1573d6000803e3d6000fd5b505050506040513d6040811015610cf757600080fd5b5080516020909101519092509050610d5e565b600083815260046020526040902054915081610d575760405162461bcd60e51b81526004018080602001828103825260288152602001806119266028913960400191505060405180910390fd5b5060035481015b915091565b600081610d6f81611376565b341015610dad5760405162461bcd60e51b815260040180806020018281038252602a815260200180611a1a602a913960400191505060405180910390fd5b600160026040518060a00160405280336001600160a01b031681526020018781526020013481526020016000815260200160006002811115610deb57fe5b9052815460018082018085556000948552602094859020845160059094020180546001600160a01b0319166001600160a01b03909416939093178355938301518282015560408301516002808401919091556060840151600384015560808401516004840180549193909260ff19909216918490811115610e6857fe5b02179055505050039150336001600160a01b0316827f141dfc18aa6a56fc816f44f0e9e2f1ebc92b15ab167770e17db5b084c10ed99560405160405180910390a35092915050565b6002808381548110610ebe57fe5b600091825260209091206004600590920201015460ff166002811115610ee057fe5b1415610f1d5760405162461bcd60e51b815260040180806020018281038252602a81526020018061199a602a913960400191505060405180910390fd5b6000828152600460205260409020600101546001600160a01b031615610fa4576000828152600460205260409020600101546001600160a01b03163314610f955760405162461bcd60e51b815260040180806020018281038252603c8152602001806118ea603c913960400191505060405180910390fd5b610f9f8282611789565b610ac7565b6000546001600160a01b03163314610fed5760405162461bcd60e51b81526004018080602001828103825260318152602001806119c46031913960400191505060405180910390fd5b600160028381548110610ffc57fe5b600091825260209091206004600590920201015460ff16600281111561101e57fe5b14156110a2576003546000838152600460205260409020544203111561106b57611066826002848154811061104f57fe5b906000526020600020906005020160030154611789565b610f9f565b60405162461bcd60e51b8152600401808060200182810382526021815260200180611a446021913960400191505060405180910390fd5b80600283815481106110b057fe5b9060005260206000209060050201600301819055506001600283815481106110d457fe5b60009182526020909120600460059092020101805460ff191660018360028111156110fb57fe5b02179055506000828152600460205260409020429055600280548390811061111f57fe5b600091825260208220600590910201546040516001600160a01b039091169184917fa5d41b970d849372be1da1481ffd78d162bfe57a7aa2fe4e5fb73481fa5ac24f9190a35050565b6000828152600460205260408120600101546001600160a01b0316156112855760008381526004602081815260408084206001810154600290910154825163791f8b7360e11b8152948501818152602486019384528851604487015288516001600160a01b039093169663f23f16e69692958a959294929360640192908601918190849084905b838110156112075781810151838201526020016111ef565b50505050905090810190601f1680156112345780820380516001836020036101000a031916815260200191505b50935050505060206040518083038186803b15801561125257600080fd5b505afa158015611266573d6000803e3d6000fd5b505050506040513d602081101561127c57600080fd5b50519050611370565b60016002848154811061129457fe5b600091825260209091206004600590920201015460ff1660028111156112b657fe5b14156113665760065460405163f7434ea960e01b81526020600482018181528551602484015285516001600160a01b039094169363f7434ea993879383926044909201919085019080838360005b8381101561131c578181015183820152602001611304565b50505050905090810190601f1680156113495780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b15801561125257600080fd5b506001600160ff1b035b92915050565b5060015490565b6000546001600160a01b031633146113dc576040805162461bcd60e51b815260206004820181905260248201527f43616e206f6e6c792062652063616c6c656420627920746865206f776e65722e604482015290519081900360640190fd5b600680546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461145d576040805162461bcd60e51b815260206004820181905260248201527f43616e206f6e6c792062652063616c6c656420627920746865206f776e65722e604482015290519081900360640190fd5b600155565b600082815260056020908152604080832054835260049091529020600101546001600160a01b03166114c55760405162461bcd60e51b8152600401808060200182810382526024815260200180611a656024913960400191505060405180910390fd5b600082815260056020526040902054610ac79082610eb0565b81816114ea8282611168565b3410156115285760405162461bcd60e51b81526004018080602001828103825260258152602001806119756025913960400191505060405180910390fd5b6000848152600460205260409020600101546001600160a01b0316156116365760008481526004602081815260408084206001810154600290910154825163093225f160e31b8152948501818152602486019384528951604487015289516001600160a01b03909316966349912f8896349693958c959394909360649092019290860191908190849084905b838110156115cc5781810151838201526020016115b4565b50505050905090810190601f1680156115f95780820380516001836020036101000a031916815260200191505b5093505050506000604051808303818588803b15801561161857600080fd5b505af115801561162c573d6000803e3d6000fd5b5050505050610b76565b60068054600086815260046020526040902060010180546001600160a01b0319166001600160a01b03928316179055905460028054919092169163c13517e1913491908890811061168357fe5b906000526020600020906005020160010154866040518463ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156116e85781810151838201526020016116d0565b50505050905090810190601f1680156117155780820380516001836020036101000a031916815260200191505b5093505050506020604051808303818588803b15801561173457600080fd5b505af1158015611748573d6000803e3d6000fd5b50505050506040513d602081101561175f57600080fd5b50516000858152600460209081526040808320600201849055928252600590522084905550505050565b60006002838154811061179857fe5b9060005260206000209060050201905080600101548211156117f3576040805162461bcd60e51b815260206004820152600f60248201526e24b73b30b634b210393ab634b7339760891b604482015290519081900360640190fd5b6002600482015460ff16600281111561180857fe5b14156118455760405162461bcd60e51b815260040180806020018281038252602781526020018061194e6027913960400191505060405180910390fd5b6003810182905560048101805460ff1916600290811790915581015460405133916108fc811502916000818181858888f1505083546040805163188d362b60e11b8152600481018990526024810188905290516001600160a01b03909216945063311a6c569350604480820193506000929182900301818387803b1580156118cc57600080fd5b505af11580156118e0573d6000803e3d6000fd5b5050505050505056fe41707065616c6564206469737075746573206d7573742062652072756c6564206279207468656972206261636b2075702061726269747261746f722e546865207370656369666965642064697370757465206973206e6f742061707065616c61626c652e5468652064697370757465206d757374206e6f7420626520736f6c76656420616c72656164792e4e6f7420656e6f7567682045544820746f20636f7665722061707065616c20636f7374732e54686520737065636966696564206469737075746520697320616c7265616479207265736f6c7665642e4e6f742061707065616c6564206469737075746573206d7573742062652072756c656420627920746865206f776e65722e43616e206f6e6c792062652063616c6c6564206279207468652061726269747261746f722e4e6f7420656e6f7567682045544820746f20636f766572206172626974726174696f6e20636f7374732e54696d65206f75742074696d6520686173206e6f7420706173736564207965742e5468652064697370757465206d7573742068617665206265656e2061707065616c65642ea265627a7a723158204b9598f977ac51cd4d02e0c4784aaaace2ae6570fd87f66b8cd26501efa7654764736f6c63430005110032",
  "devdoc": {
    "author": "Enrique Piqueras - <epiquerass@gmail.com>",
    "details": "Implementation of `AppealableArbitrator` that supports `appealPeriod`.",
    "methods": {
      "appeal(uint256,bytes)": {
        "details": "Appeals a ruling.",
        "params": {
          "_disputeID": "The ID of the dispute.",
          "_extraData": "Additional info about the appeal."
        }
      },
      "appealCost(uint256,bytes)": {
        "details": "Gets the cost of appeal for the specified dispute.",
        "params": {
          "_disputeID": "The ID of the dispute.",
          "_extraData": "Additional info about the appeal."
        },
        "return": "The cost of the appeal."
      },
      "appealPeriod(uint256)": {
        "details": "Compute the start and end of the dispute's current or next appeal period, if possible.",
        "params": {
          "_disputeID": "ID of the dispute."
        },
        "return": "The start and end of the period."
      },
      "arbitrationCost(bytes)": {
        "details": "Cost of arbitration. Accessor to arbitrationPrice.",
        "params": {
          "_extraData": "Not used by this contract."
        },
        "return": "fee Amount to be paid."
      },
      "changeArbitrator(address)": {
        "details": "Changes the back up arbitrator.",
        "params": {
          "_arbitrator": "The new back up arbitrator."
        }
      },
      "changeTimeOut(uint256)": {
        "details": "Changes the time out.",
        "params": {
          "_timeOut": "The new time out."
        }
      },
      "constructor": {
        "details": "Constructs the `EnhancedAppealableArbitrator` contract.",
        "params": {
          "_arbitrationPrice": "The amount to be paid for arbitration.",
          "_arbitrator": "The back up arbitrator.",
          "_arbitratorExtraData": "Not used by this contract.",
          "_timeOut": "The time out for the appeal period."
        }
      },
      "createDispute(uint256,bytes)": {
        "details": "Create a dispute. Must be called by the arbitrable contract. Must be paid at least arbitrationCost().",
        "params": {
          "_choices": "Amount of choices the arbitrator can make in this dispute. When ruling ruling<=choices.",
          "_extraData": "Can be used to give additional info on the dispute to be created."
        },
        "return": "disputeID ID of the dispute created."
      },
      "currentRuling(uint256)": {
        "details": "Return the ruling of a dispute.",
        "params": {
          "_disputeID": "ID of the dispute to rule."
        },
        "return": "ruling The ruling which would or has been given."
      },
      "disputeStatus(uint256)": {
        "details": "Gets the status of the specified dispute.",
        "params": {
          "_disputeID": "The ID of the dispute."
        },
        "return": "The status."
      },
      "getAppealDisputeID(uint256)": {
        "details": "Gets the specified dispute's latest appeal ID.",
        "params": {
          "_disputeID": "The ID of the dispute."
        }
      },
      "giveRuling(uint256,uint256)": {
        "details": "Gives a ruling.",
        "params": {
          "_disputeID": "The ID of the dispute.",
          "_ruling": "The ruling."
        }
      },
      "rule(uint256,uint256)": {
        "details": "Give a ruling for a dispute. Must be called by the arbitrator. The purpose of this function is to ensure that the address calling it has the right to rule on the contract.",
        "params": {
          "_disputeID": "ID of the dispute in the IArbitrator contract.",
          "_ruling": "Ruling given by the arbitrator. Note that 0 is reserved for \"Not able/wanting to make a decision\"."
        }
      },
      "setArbitrationPrice(uint256)": {
        "details": "Set the arbitration price. Only callable by the owner.",
        "params": {
          "_arbitrationPrice": "Amount to be paid for arbitration."
        }
      }
    },
    "title": "EnhancedAppealableArbitrator"
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6210,
        "contract": "contracts/test-purposes/EnhancedAppealableArbitrator.sol:EnhancedAppealableArbitrator",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6212,
        "contract": "contracts/test-purposes/EnhancedAppealableArbitrator.sol:EnhancedAppealableArbitrator",
        "label": "arbitrationPrice",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 6264,
        "contract": "contracts/test-purposes/EnhancedAppealableArbitrator.sol:EnhancedAppealableArbitrator",
        "label": "disputes",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(DisputeStruct)6233_storage)dyn_storage"
      },
      {
        "astId": 5719,
        "contract": "contracts/test-purposes/EnhancedAppealableArbitrator.sol:EnhancedAppealableArbitrator",
        "label": "timeOut",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 5723,
        "contract": "contracts/test-purposes/EnhancedAppealableArbitrator.sol:EnhancedAppealableArbitrator",
        "label": "appealDisputes",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(AppealDispute)5684_storage)"
      },
      {
        "astId": 5727,
        "contract": "contracts/test-purposes/EnhancedAppealableArbitrator.sol:EnhancedAppealableArbitrator",
        "label": "appealDisputeIDsToDisputeIDs",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5729,
        "contract": "contracts/test-purposes/EnhancedAppealableArbitrator.sol:EnhancedAppealableArbitrator",
        "label": "arbitrator",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IArbitrator)99"
      },
      {
        "astId": 5731,
        "contract": "contracts/test-purposes/EnhancedAppealableArbitrator.sol:EnhancedAppealableArbitrator",
        "label": "arbitratorExtraData",
        "offset": 0,
        "slot": "7",
        "type": "t_bytes_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(DisputeStruct)6233_storage)dyn_storage": {
        "base": "t_struct(DisputeStruct)6233_storage",
        "encoding": "dynamic_array",
        "label": "struct CentralizedArbitrator.DisputeStruct[]",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IArbitrable)18": {
        "encoding": "inplace",
        "label": "contract IArbitrable",
        "numberOfBytes": "20"
      },
      "t_contract(IArbitrator)99": {
        "encoding": "inplace",
        "label": "contract IArbitrator",
        "numberOfBytes": "20"
      },
      "t_enum(DisputeStatus)25": {
        "encoding": "inplace",
        "label": "enum IArbitrator.DisputeStatus",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(AppealDispute)5684_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct AppealableArbitrator.AppealDispute)",
        "numberOfBytes": "32",
        "value": "t_struct(AppealDispute)5684_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AppealDispute)5684_storage": {
        "encoding": "inplace",
        "label": "struct AppealableArbitrator.AppealDispute",
        "members": [
          {
            "astId": 5679,
            "contract": "contracts/test-purposes/EnhancedAppealableArbitrator.sol:EnhancedAppealableArbitrator",
            "label": "rulingTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5681,
            "contract": "contracts/test-purposes/EnhancedAppealableArbitrator.sol:EnhancedAppealableArbitrator",
            "label": "arbitrator",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IArbitrator)99"
          },
          {
            "astId": 5683,
            "contract": "contracts/test-purposes/EnhancedAppealableArbitrator.sol:EnhancedAppealableArbitrator",
            "label": "appealDisputeID",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(DisputeStruct)6233_storage": {
        "encoding": "inplace",
        "label": "struct CentralizedArbitrator.DisputeStruct",
        "members": [
          {
            "astId": 6224,
            "contract": "contracts/test-purposes/EnhancedAppealableArbitrator.sol:EnhancedAppealableArbitrator",
            "label": "arbitrated",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IArbitrable)18"
          },
          {
            "astId": 6226,
            "contract": "contracts/test-purposes/EnhancedAppealableArbitrator.sol:EnhancedAppealableArbitrator",
            "label": "choices",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6228,
            "contract": "contracts/test-purposes/EnhancedAppealableArbitrator.sol:EnhancedAppealableArbitrator",
            "label": "fee",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6230,
            "contract": "contracts/test-purposes/EnhancedAppealableArbitrator.sol:EnhancedAppealableArbitrator",
            "label": "ruling",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6232,
            "contract": "contracts/test-purposes/EnhancedAppealableArbitrator.sol:EnhancedAppealableArbitrator",
            "label": "status",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(DisputeStatus)25"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
